{"ast":null,"code":"var _jsxFileName = \"/home/andreea/Projects/go-it/goit-react-hw-04-feedback/src/components/App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions';\nimport Statistics from './Statistics/Statistics';\nimport Notification from './Notification/Notification';\nimport Section from './Section/Section';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const App = () => {\n  _s();\n\n  const [feedbacks, setFeedbacks] = useState({\n    good: 0,\n    neutral: 0,\n    bad: 0\n  });\n\n  const handleFeedback = event => {\n    const feedback = event.target.name;\n    setFeedbacks(prev => {\n      return {\n        [feedback]: prev[feedback] + 1\n      };\n    });\n  };\n\n  const countTotalFeedback = () => {\n    let totalFeedback = feedbacks.good + feedbacks.neutral + feedbacks.bad;\n    return totalFeedback;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return Math.round(feedbacks.good / countTotalFeedback() * 100);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Section, {\n      title: \"Please leave feedback\",\n      children: [/*#__PURE__*/_jsxDEV(FeedbackOptions, {\n        options: feedbacks,\n        onLeaveFeedback: handleFeedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this), this.countTotalFeedback() !== 0 ? /*#__PURE__*/_jsxDEV(Statistics, {\n        good: feedbacks.good,\n        neutral: feedbacks.neutral,\n        bad: feedbacks.bad,\n        total: countTotalFeedback(),\n        positivePercentage: countPositiveFeedbackPercentage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Notification, {\n        message: \"There is no feedback\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(App, \"F0BIRn618dXw6UDkKRipFAJkAdg=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/andreea/Projects/go-it/goit-react-hw-04-feedback/src/components/App.jsx"],"names":["React","useState","FeedbackOptions","Statistics","Notification","Section","App","feedbacks","setFeedbacks","good","neutral","bad","handleFeedback","event","feedback","target","name","prev","countTotalFeedback","totalFeedback","countPositiveFeedbackPercentage","Math","round"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,OAAP,MAAoB,mBAApB;;;AAEA,OAAO,MAAMC,GAAG,GAAE,MAAI;AAAA;;AAGpB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC;AAACQ,IAAAA,IAAI,EAAE,CAAP;AACzCC,IAAAA,OAAO,EAAE,CADgC;AAEzCC,IAAAA,GAAG,EAAE;AAFoC,GAAD,CAA1C;;AAKE,QAAMC,cAAc,GAAGC,KAAK,IAAI;AAC5B,UAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAaC,IAA9B;AACAR,IAAAA,YAAY,CAACS,IAAI,IAAI;AACnB,aAAO;AACL,SAACH,QAAD,GAAYG,IAAI,CAACH,QAAD,CAAJ,GAAiB;AADxB,OAAP;AAGH,KAJa,CAAZ;AAKH,GAPD;;AAUD,QAAMI,kBAAkB,GAAG,MAAM;AAC9B,QAAIC,aAAa,GAAGZ,SAAS,CAACE,IAAV,GAAiBF,SAAS,CAACG,OAA3B,GAAqCH,SAAS,CAACI,GAAnE;AACA,WAAOQ,aAAP;AACD,GAHF;;AAKA,QAAMC,+BAA+B,GAAG,MAAM;AAC3C,WAAOC,IAAI,CAACC,KAAL,CAAYf,SAAS,CAACE,IAAV,GAAiBS,kBAAkB,EAApC,GAA0C,GAArD,CAAP;AACD,GAFF;;AAIA,sBACG;AAAA,2BACE,QAAC,OAAD;AAAS,MAAA,KAAK,EAAC,uBAAf;AAAA,8BACE,QAAC,eAAD;AACE,QAAA,OAAO,EAAEX,SADX;AAEE,QAAA,eAAe,EAAEK;AAFnB;AAAA;AAAA;AAAA;AAAA,cADF,EAMG,KAAKM,kBAAL,OAA8B,CAA9B,gBACC,QAAC,UAAD;AACE,QAAA,IAAI,EAAEX,SAAS,CAACE,IADlB;AAEE,QAAA,OAAO,EAAEF,SAAS,CAACG,OAFrB;AAGE,QAAA,GAAG,EAAEH,SAAS,CAACI,GAHjB;AAIE,QAAA,KAAK,EAAEO,kBAAkB,EAJ3B;AAKE,QAAA,kBAAkB,EAAEE,+BAA+B;AALrD;AAAA;AAAA;AAAA;AAAA,cADD,gBASC,QAAC,YAAD;AAAc,QAAA,OAAO,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,cAfJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADH;AAsBA,CAjDI;;GAAMd,G;;KAAAA,G","sourcesContent":["import React, { useState } from 'react';\nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions';\nimport Statistics from './Statistics/Statistics';\nimport Notification from './Notification/Notification';\nimport Section from './Section/Section';\n\nexport const App =()=>{\n    \n\n  const [feedbacks, setFeedbacks] = useState({good: 0,\n    neutral: 0,\n    bad: 0,});\n     \n  \n    const handleFeedback = event => {\n        const feedback = event.target.name;\n        setFeedbacks(prev => {\n          return {\n            [feedback]: prev[feedback] + 1,\n          };\n      });\n    };\n  \n  \n   const countTotalFeedback = () => {\n      let totalFeedback = feedbacks.good + feedbacks.neutral + feedbacks.bad;\n      return totalFeedback;\n    };\n  \n   const countPositiveFeedbackPercentage = () => {\n      return Math.round((feedbacks.good / countTotalFeedback()) * 100);\n    };\n\n   return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={feedbacks}\n            onLeaveFeedback={handleFeedback}\n          />\n\n          {this.countTotalFeedback() !== 0 ? (\n            <Statistics\n              good={feedbacks.good}\n              neutral={feedbacks.neutral}\n              bad={feedbacks.bad}\n              total={countTotalFeedback()}\n              positivePercentage={countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification message=\"There is no feedback\" />\n          )}\n        </Section>\n      </>\n    );\n  }\n\n"]},"metadata":{},"sourceType":"module"}